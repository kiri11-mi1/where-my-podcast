import requests
import re
import pytube
import json
import os
import subprocess


class Bot:
    '''–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã'''

    def __init__(self, token, admin_username):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'''
        self.token = token
        self.api = f'https://api.telegram.org/bot{token}/'
        self.admin_username = admin_username

        self.content = None
        self.chat_id = None
        self.content_type = None
        self.content_url = None


    def send_message(self, chat_id, text, reply_markup = None):
        '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'''
        params = {'chat_id': chat_id, 'text': text, 'reply_markup': reply_markup}
        method = 'sendMessage'
        response = requests.post(self.api + method, params).json()
        return response


    def set_webhook(self, host):
        '''–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook'''
        method='setWebhook'
        params = {'url': host}
        response = requests.get(self.api + method, params).json()
        return response


    def delete_webhook(self, host):
        '''–£–¥–∞–ª–µ–Ω–∏–µ Webhook'''
        method='deleteWebhook'
        params = {'url': host}
        response = requests.get(self.api + method, params).json()
        return response


    def send_audio(self, chat_id, audio_id):
        '''–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ'''
        method = 'sendAudio'
        params = {'chat_id': chat_id, 'audio': audio_id}
        response = requests.post(self.api + method, params).json()
        return response


    def send_video(self, chat_id, video_id):
        '''–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ'''
        method = 'sendVideo'
        params = {'chat_id': chat_id, 'video': video_id}
        response = requests.post(self.api + method, params).json()
        return response


    def send_document(self, chat_id, doc_id):
        '''–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞'''
        method = 'sendDocument'
        params = {'chat_id': chat_id, 'document': doc_id}
        response = requests.post(self.api + method, params).json()
        return response


    def handle(self, last_upd):
    
        keyboard = None

        if 'message' in last_upd:

            # –ü–æ–ª—É—á–µ–Ω–∏–µ id –¥–∏–∞–ª–æ–≥–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = last_upd['message']['chat']['id']  
            
            # –ï—Å–ª–∏ –Ω–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'text' in last_upd['message']:
                user_name = last_upd['message']['chat']['first_name']
                chat_text = last_upd['message']['text']

                # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                if chat_text in ['/help', '/start']:
                    text = f'–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ? –¢—ã–∫–Ω–∏ ‚û°Ô∏è /load_audio\
                            \n–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ? –¢—ã–∫–Ω–∏ ‚û°Ô∏è /load_video'

                elif chat_text in ['/load_audio', '/load_video']:
                    self.content_type = chat_text.replace('/load_', '')
                    if self.content_url:
                        text, keyboard = self.get_content_buttons()
                        self.content_type, self.content_url = None, None
                    else:
                        text = '–í–≤–µ–¥–∏—Ç–µ URL –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å YouTube...'

                elif self.is_url(chat_text):
                    self.content_url = chat_text
                    if self.content_type:
                        text, keyboard = self.get_content_buttons()
                        self.content_type, self.content_url = None, None
                    else:
                        text = f'–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ? –¢—ã–∫–Ω–∏ ‚û°Ô∏è /load_audio\
                            \n–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ? –¢—ã–∫–Ω–∏ ‚û°Ô∏è /load_video'

                else:
                    text = f"{user_name}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —Ç—ã–∫–Ω–∏ ‚û°Ô∏è /help"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
                self.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)

            if self.is_admin(last_upd['message']['from']['username']):
                # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω, —Ç–æ –º—ã –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª –≤ –¥–∏–∞–ª–æ–≥
                # —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª —ç—Ç–æ—Ç —Ñ–∞–π–ª
                if 'audio' in last_upd['message']:
                    file_id = last_upd['message']['audio']['file_id']
                    self.send_audio(self.chat_id, file_id)

                if 'video' in last_upd['message']:
                    file_id = last_upd['message']['video']['file_id']
                    self.send_video(self.chat_id, file_id)
                
                if 'document' in last_upd['message']:
                    file_id = last_upd['message']['document']['file_id']
                    self.send_document(self.chat_id, file_id)

        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏
        elif 'callback_query' in last_upd:

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            callback_data = last_upd['callback_query']['data']
            chat_id = last_upd['callback_query']['message']['chat']['id']

            if callback_data == 'repeat':
                # –ü—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                pass

            else:
                if self.content:
                    text = f'üëç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
                    mime_type, _ = self.content[int(callback_data)].mime_type.split('/')
                    self.content[int(callback_data)].download('download')
                    old_filename = os.listdir('download')[0]

                    if mime_type == 'audio':
                        # –ï—Å–ª–∏ —É –Ω–∞—Å –∞—É–¥–∏–æ -> –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3 -> –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
                        subprocess.call(['ffmpeg', 
                                         '-i',
                                         'download/'+old_filename,
                                         'download/out.mp3',
                                         '-y'])
                        os.system(f"python client.py download/out.mp3")
                    
                    elif mime_type == 'video':
                        # –ï—Å–ª–∏ —É –Ω–∞—Å –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å—Ä–∞–∑—É
                        subprocess.call(['python', 'client.py', 'download/'+old_filename])

                    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ chat_id, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    # —Ñ–∞–π–ª —Å –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
                    self.chat_id = chat_id

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                    self.delete_all_files('download')
                    self.content = None

                else:
                    text = f'‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ –∑–∞–Ω–æ–≤–æ!'

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
            self.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)


    def get_content_buttons(self):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫'''
        buttons = []
        try:
            content = pytube.YouTube(self.content_url)

        except pytube.exceptions.RegexMatchError:
            # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç
            return '‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL', None

        except json.decoder.JSONDecodeError:
            # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
            return '‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç—ã–∫–Ω–∏—Ç–µ –ø–æ –∫–Ω–æ–∫–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É',\
                    json.dumps({'inline_keyboard': [
                        { 'text': 'üîÉ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë', 'callback_data': 'repeat' }
                        ]})
        
        if self.content_type == 'audio':
            self.content = content.streams.filter(type=self.content_type, 
                                                abr='128kbps', 
                                                mime_type="audio/mp4").all()

        elif self.content_type == 'video':
            self.content = content.streams.filter(type=self.content_type,
                                                progressive=True,
                                                res='720p').all()

        for i, val in enumerate(self.content):
            buttons.append([{ 'text': f'‚úÖ {self.parse_name_content(str(val))}', 'callback_data': i }])
        
        return '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω:', json.dumps({'inline_keyboard': buttons})


    def parse_name_content(self, name):
        '''–í—ã—á–ª–µ–Ω—è–µ—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤'''
        return ', '.join(re.findall(r"\d+fps|video/mp4|\d+p|\d+kbps|audio/\w+", name))


    def is_url(self, url):
        '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ url –∏–∑ YouTube'''
        template = r'https?://(?:www\.)?youtube\.com[^&\s]+(?=\s|$)'
        if re.search(template, url):
            return True
        return False


    def is_admin(self, username):
        '''–ü—Ä–æ–≤–µ—Ä–µ—è–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''
        if username == self.admin_username:
            return True
        return False


    def delete_all_files(self, directory):
        '''–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ'''
        for filename in os.listdir(directory):
            os.remove(f'{directory}/{filename}')
